Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.3.304 Build 20200925_000000

Compiler options: -std=c99 -Wall -Ofast -qopt-report=5 -mtune=native -fopenmp -march=native -lm -o d2q9-bgk

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/14=7.1%] d2q9-bgk.c(147,1)
  -> INLINE: (161,5) usage(const char *) (isz = 6) (sz = 10)
    -> EXTERN: (885,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (886,3) exit(int)
  -> EXTERN: (170,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> (173,3) initialise(const char *, const char *, t_param *, s_speed *, s_speed *, int **, decimal **) (isz = 831) (sz = 850)
     [[ Inlining would exceed -inline-max-size value (850>230) <1>]]
  -> EXTERN: (176,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE: (182,19) timestep(const t_param, s_speed *, s_speed *, int *) (isz = 66) (sz = 79)
    -> (229,3) accelerate_flow(const t_param, const s_speed *__restrict__, const int *) (isz = 233) (sz = 244)
       [[ Inlining would exceed -inline-max-size value (244>230) <1>]]
    -> (230,12) pro_re_col_av(const t_param, const s_speed *, s_speed *, const int *) (isz = 468) (sz = 481)
       [[ Inlining would exceed -inline-max-size value (481>230) <1>]]
  -> EXTERN: (195,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (202,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (207,3) printf(const char *__restrict__, ...)
  -> EXTERN: (209,3) printf(const char *__restrict__, ...)
  -> EXTERN: (210,3) printf(const char *__restrict__, ...)
  -> EXTERN: (211,3) printf(const char *__restrict__, ...)
  -> EXTERN: (212,3) printf(const char *__restrict__, ...)
  -> (213,3) write_values(const t_param, s_speed *, int *, decimal *) (isz = 276) (sz = 289)
     [[ Inlining would exceed -inline-max-size value (289>230) <1>]]
  -> INLINE: (214,3) finalise(const t_param *, s_speed *, s_speed *, int **, decimal **) (isz = 31) (sz = 46)
    -> INLINE (MANUAL): (751,6) _mm_free(void *) (isz = 0) (sz = 5)
      -> EXTERN: /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h:(54,3) free(void *)
    -> INLINE (MANUAL): (752,6) _mm_free(void *) (isz = 0) (sz = 5)
      -> EXTERN: /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h:(54,3) free(void *)
    -> INLINE (MANUAL): (757,3) _mm_free(void *) (isz = 0) (sz = 5)
      -> EXTERN: /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h:(54,3) free(void *)
    -> INLINE (MANUAL): (760,3) _mm_free(void *) (isz = 0) (sz = 5)
      -> EXTERN: /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h:(54,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(180,3)
   remark #15382: vectorization support: call to function accelerate_flow(const t_param, const s_speed *__restrict__, const int *) cannot be vectorized   [ d2q9-bgk.c(229,3) ]
   remark #15382: vectorization support: call to function pro_re_col_av(const t_param, const s_speed *, s_speed *, const int *) cannot be vectorized   [ d2q9-bgk.c(230,12) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between params (182:19) and tmp_cells (230:12)
   remark #15346: vector dependence: assumed OUTPUT dependence between tmp_cells (230:12) and params (182:19)
LOOP END

LOOP BEGIN at d2q9-bgk.c(749,14) inlined into d2q9-bgk.c(214,3)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h(54,3) ]
   remark #25436: completely unrolled by 9  
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(182,19):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk.c(229,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(230,12):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(234,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
d2q9-bgk.c(235,13):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
d2q9-bgk.c(236,16):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
d2q9-bgk.c(213,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(147,1):remark #34051: REGISTER ALLOCATION : [main] d2q9-bgk.c:147

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     160
            Global    :      25
            Local     :     135
        Regenerable   :      52
        Spilled       :       9
        
    Routine stack
        Variables     :     236 bytes*
            Reads     :      50 [2.35e+01 ~ 23.5%]
            Writes    :      33 [1.64e+01 ~ 16.4%]
        Spills        :      32 bytes*
            Reads     :       8 [1.96e+00 ~ 2.0%]
            Writes    :       4 [9.81e-01 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: pro_re_col_av(const t_param, const s_speed *, s_speed *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (pro_re_col_av(const t_param, const s_speed *, s_speed *, const int *)) [2/14=14.3%] d2q9-bgk.c(308,1)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at d2q9-bgk.c(337,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(338,3)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ d2q9-bgk.c(502,9) ]
   remark #25084: Preprocess Loopnests: Moving Out Store    [ d2q9-bgk.c(503,11) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[0][ii+jj*U6_V]>, part of index is nonlinearly computed   [ d2q9-bgk.c(360,23) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[1][x_w+jj*U6_V]>, part of index is conditional   [ d2q9-bgk.c(361,23) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[2][ii+y_s*U6_V]>, part of index is conditional   [ d2q9-bgk.c(362,23) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[3][x_e+jj*U6_V]>, part of index is nonlinearly computed   [ d2q9-bgk.c(363,23) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[4][ii+y_n*U6_V]>, part of index is nonlinearly computed   [ d2q9-bgk.c(364,23) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[5][x_w+y_s*U6_V]>, part of index is conditional   [ d2q9-bgk.c(365,23) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[6][x_e+y_s*U6_V]>, part of index is conditional   [ d2q9-bgk.c(366,23) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[7][x_e+y_n*U6_V]>, part of index is nonlinearly computed   [ d2q9-bgk.c(367,23) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[8][x_w+y_n*U6_V]>, part of index is conditional   [ d2q9-bgk.c(368,23) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <obstacles[id]>, part of index is nonlinearly computed   [ d2q9-bgk.c(374,11) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmp_cells->speeds[1][id]>, masked, part of index is nonlinearly computed   [ d2q9-bgk.c(379,9) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmp_cells->speeds[2][id]>, masked, part of index is nonlinearly computed   [ d2q9-bgk.c(380,9) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmp_cells->speeds[3][id]>, masked, part of index is nonlinearly computed   [ d2q9-bgk.c(381,9) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmp_cells->speeds[4][id]>, masked, part of index is nonlinearly computed   [ d2q9-bgk.c(382,9) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmp_cells->speeds[5][id]>, masked, part of index is nonlinearly computed   [ d2q9-bgk.c(383,9) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmp_cells->speeds[6][id]>, masked, part of index is nonlinearly computed   [ d2q9-bgk.c(384,9) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmp_cells->speeds[7][id]>, masked, part of index is nonlinearly computed   [ d2q9-bgk.c(385,9) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmp_cells->speeds[8][id]>, masked, part of index is nonlinearly computed   [ d2q9-bgk.c(386,9) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmp_cells->speeds[kk][id]>, masked, part of index is nonlinearly computed   [ d2q9-bgk.c(486,11) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmp_cells->speeds[kk][id]>, masked, part of index is nonlinearly computed   [ d2q9-bgk.c(486,11) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmp_cells->speeds[kk][id]>, masked, part of index is nonlinearly computed   [ d2q9-bgk.c(486,11) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmp_cells->speeds[kk][id]>, masked, part of index is nonlinearly computed   [ d2q9-bgk.c(486,11) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmp_cells->speeds[kk][id]>, masked, part of index is nonlinearly computed   [ d2q9-bgk.c(486,11) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmp_cells->speeds[kk][id]>, masked, part of index is nonlinearly computed   [ d2q9-bgk.c(486,11) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmp_cells->speeds[kk][id]>, masked, part of index is nonlinearly computed   [ d2q9-bgk.c(486,11) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmp_cells->speeds[kk][id]>, masked, part of index is nonlinearly computed   [ d2q9-bgk.c(486,11) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmp_cells->speeds[kk][id]>, masked, part of index is nonlinearly computed   [ d2q9-bgk.c(486,11) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.030
   remark #26012: vectorization support: data layout of a private variable tmp_speeds was optimized, converted to SoA
   remark #26012: vectorization support: data layout of a private variable u was optimized, converted to SoA
   remark #26012: vectorization support: data layout of a private variable d_equ was optimized, converted to SoA
   remark #15355: vectorization support: at (502:9) is float type reduction   [ d2q9-bgk.c(502,9) ]
   remark #15355: vectorization support: at (503:11) is int type reduction   [ d2q9-bgk.c(503,11) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 26 
   remark #15456: masked unaligned unit stride loads: 68 
   remark #15459: masked indexed (or scatter) stores: 17 
   remark #15462: unmasked indexed (or gather) loads: 10 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 871 
   remark #15477: vector cost: 1092.870 
   remark #15478: estimated potential speedup: 0.790 
   remark #15482: vectorized math library calls: 4 
   remark #15486: divides: 2 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at d2q9-bgk.c(446,9)
      remark #25436: completely unrolled by 4   (pre-vector) 
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(484,9)
      remark #25436: completely unrolled by 9   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(338,3)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(308,1):remark #34051: REGISTER ALLOCATION : [pro_re_col_av] d2q9-bgk.c:308

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1298
            Global    :     309
            Local     :     989
        Regenerable   :     120
        Spilled       :      68
        
    Routine stack
        Variables     :     984 bytes*
            Reads     :      53 [1.38e+00 ~ 1.4%]
            Writes    :      48 [2.22e+00 ~ 2.2%]
        Spills        :    1088 bytes*
            Reads     :     150 [9.25e+00 ~ 9.3%]
            Writes    :      88 [5.70e+00 ~ 5.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: accelerate_flow(const t_param, const s_speed *__restrict__, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (accelerate_flow(const t_param, const s_speed *__restrict__, const int *)) [3/14=21.4%] d2q9-bgk.c(244,104)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at d2q9-bgk.c(264,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(264,3)
   remark #15388: vectorization support: reference cells->speeds[1][id] has aligned access   [ d2q9-bgk.c(276,7) ]
   remark #15388: vectorization support: reference cells->speeds[1][id] has aligned access   [ d2q9-bgk.c(276,37) ]
   remark #15388: vectorization support: reference cells->speeds[5][id] has aligned access   [ d2q9-bgk.c(277,7) ]
   remark #15388: vectorization support: reference cells->speeds[5][id] has aligned access   [ d2q9-bgk.c(277,37) ]
   remark #15388: vectorization support: reference cells->speeds[8][id] has aligned access   [ d2q9-bgk.c(278,37) ]
   remark #15388: vectorization support: reference cells->speeds[8][id] has aligned access   [ d2q9-bgk.c(278,7) ]
   remark #15388: vectorization support: reference cells->speeds[3][id] has aligned access   [ d2q9-bgk.c(280,37) ]
   remark #15388: vectorization support: reference cells->speeds[8][id] has aligned access   [ d2q9-bgk.c(278,63) ]
   remark #15388: vectorization support: reference cells->speeds[8][id] has aligned access   [ d2q9-bgk.c(278,7) ]
   remark #15388: vectorization support: reference cells->speeds[3][id] has aligned access   [ d2q9-bgk.c(280,63) ]
   remark #15388: vectorization support: reference cells->speeds[3][id] has aligned access   [ d2q9-bgk.c(280,7) ]
   remark #15388: vectorization support: reference cells->speeds[6][id] has aligned access   [ d2q9-bgk.c(281,37) ]
   remark #15388: vectorization support: reference cells->speeds[6][id] has aligned access   [ d2q9-bgk.c(281,63) ]
   remark #15388: vectorization support: reference cells->speeds[6][id] has aligned access   [ d2q9-bgk.c(281,7) ]
   remark #15388: vectorization support: reference cells->speeds[7][id] has aligned access   [ d2q9-bgk.c(282,37) ]
   remark #15388: vectorization support: reference cells->speeds[7][id] has aligned access   [ d2q9-bgk.c(282,63) ]
   remark #15388: vectorization support: reference cells->speeds[7][id] has aligned access   [ d2q9-bgk.c(282,7) ]
   remark #15388: vectorization support: reference cells->speeds[8][id] has aligned access   [ d2q9-bgk.c(278,7) ]
   remark #15388: vectorization support: reference cells->speeds[8][id] has aligned access   [ d2q9-bgk.c(278,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.121
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 16 
   remark #15449: unmasked aligned unit stride stores: 5 
   remark #15455: masked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 68 
   remark #15477: vector cost: 17.620 
   remark #15478: estimated potential speedup: 3.700 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(264,3)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(244,104):remark #34051: REGISTER ALLOCATION : [accelerate_flow] d2q9-bgk.c:244

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     213
            Global    :      56
            Local     :     157
        Regenerable   :      57
        Spilled       :      19
        
    Routine stack
        Variables     :      52 bytes*
            Reads     :       4 [0.00e+00 ~ 0.0%]
            Writes    :      10 [5.84e+00 ~ 5.8%]
        Spills        :     184 bytes*
            Reads     :      31 [3.39e+00 ~ 3.4%]
            Writes    :      28 [4.74e+00 ~ 4.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: write_values(const t_param, s_speed *, int *, decimal *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (write_values(const t_param, s_speed *, int *, decimal *)) [4/14=28.6%] d2q9-bgk.c(793,1)
  -> EXTERN: (802,8) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (806,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (852,7) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (856,3) fclose(FILE *)
  -> EXTERN: (858,8) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (862,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (867,5) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (870,3) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(809,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(852,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between cells->speeds (826:11) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (852:7)
   remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (852:7) and cells->speeds (826:11)

   LOOP BEGIN at d2q9-bgk.c(811,5)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(852,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between cells->speeds (826:11) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (852:7)
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (852:7) and cells->speeds (826:11)

      LOOP BEGIN at d2q9-bgk.c(824,9)
         remark #25436: completely unrolled by 9   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(865,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(867,5) ]
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(793,1):remark #34051: REGISTER ALLOCATION : [write_values] d2q9-bgk.c:793

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     155
            Global    :      37
            Local     :     118
        Regenerable   :      44
        Spilled       :      13
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :       9 [5.44e+00 ~ 5.4%]
            Writes    :       8 [1.49e+00 ~ 1.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: _mm_malloc(size_t, size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (_mm_malloc(size_t, size_t)) /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h(39,1)

===========================================================================

Begin optimization report for: _mm_free(void *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (_mm_free(void *)) /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h(53,1)

===========================================================================

Begin optimization report for: timestep(const t_param, s_speed *, s_speed *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timestep(const t_param, s_speed *, s_speed *, int *)) [7/14=50.0%] d2q9-bgk.c(226,1)
  -> (229,3) accelerate_flow(const t_param, const s_speed *__restrict__, const int *) (isz = 233) (sz = 244)
     [[ Inlining would exceed -inline-max-size value (244>230) <1>]]
  -> (230,12) pro_re_col_av(const t_param, const s_speed *, s_speed *, const int *) (isz = 468) (sz = 481)
     [[ Inlining would exceed -inline-max-size value (481>230) <1>]]


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(229,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(230,12):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(234,18):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
d2q9-bgk.c(234,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
d2q9-bgk.c(235,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
d2q9-bgk.c(235,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 32 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(235,13):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(236,16):remark #34014: optimization advice for memcpy: increase the destination's alignment to 32 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(236,16):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(226,1):remark #34051: REGISTER ALLOCATION : [timestep] d2q9-bgk.c:226

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8 r12-r13 zmm0-zmm4]
        
    Routine temporaries
        Total         :      34
            Global    :      11
            Local     :      23
        Regenerable   :       6
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: av_velocity(const t_param, s_speed *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (av_velocity(const t_param, s_speed *, int *)) [8/14=57.1%] d2q9-bgk.c(528,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(536,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(538,5)
      remark #15389: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(548,28) ]
      remark #15389: vectorization support: reference cells->speeds[1][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(552,24) ]
      remark #15389: vectorization support: reference *(u_x+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(553,25) ]
      remark #15389: vectorization support: reference *(u_x+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(554,25) ]
      remark #15389: vectorization support: reference cells->speeds[3][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(555,26) ]
      remark #15389: vectorization support: reference *(u_x+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(556,28) ]
      remark #15389: vectorization support: reference *(u_x+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(557,28) ]
      remark #15389: vectorization support: reference cells->speeds[2][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(560,24) ]
      remark #15389: vectorization support: reference *(u_x+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(561,25) ]
      remark #15389: vectorization support: reference *(u_x+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(562,25) ]
      remark #15389: vectorization support: reference cells->speeds[4][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(563,26) ]
      remark #15389: vectorization support: reference *(u_x+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(565,28) ]
      remark #15389: vectorization support: reference *(u_x+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(564,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.263
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(533,3) ]
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(529,20) ]
      remark #15301: OUTER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 13 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 115 
      remark #15477: vector cost: 28.000 
      remark #15478: estimated potential speedup: 3.910 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at d2q9-bgk.c(546,9)
         remark #15389: vectorization support: reference cells->speeds[kk] has unaligned access   [ d2q9-bgk.c(548,28) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: indirect load was emulated for the variable <cells->speeds[kk][ii+jj*params.nx]>, 64-bit indexed, part of address is read from memory   [ d2q9-bgk.c(548,28) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.163
         remark #15355: vectorization support: local_density is float type reduction   [ d2q9-bgk.c(544,31) ]
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15462: unmasked indexed (or gather) loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 13.000 
         remark #15478: estimated potential speedup: 0.350 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(538,5)
   <Remainder loop for vectorization>

      LOOP BEGIN at d2q9-bgk.c(546,9)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(528,1):remark #34051: REGISTER ALLOCATION : [av_velocity] d2q9-bgk.c:528

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     152
            Global    :      40
            Local     :     112
        Regenerable   :      10
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       5 [7.12e-01 ~ 0.7%]
            Writes    :       4 [4.56e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: finalise(const t_param *, s_speed *, s_speed *, int **, decimal **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (finalise(const t_param *, s_speed *, s_speed *, int **, decimal **)) [9/14=64.3%] d2q9-bgk.c(745,1)
  -> INLINE (MANUAL): (751,6) _mm_free(void *) (isz = 0) (sz = 5)
    -> EXTERN: /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h:(54,3) free(void *)
  -> INLINE (MANUAL): (752,6) _mm_free(void *) (isz = 0) (sz = 5)
    -> EXTERN: /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h:(54,3) free(void *)
  -> INLINE (MANUAL): (757,3) _mm_free(void *) (isz = 0) (sz = 5)
    -> EXTERN: /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h:(54,3) free(void *)
  -> INLINE (MANUAL): (760,3) _mm_free(void *) (isz = 0) (sz = 5)
    -> EXTERN: /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h:(54,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(749,14)
   remark #15382: vectorization support: call to function free(void *) cannot be vectorized   [ /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h(54,3) ]
   remark #15382: vectorization support: call to function free(void *) cannot be vectorized   [ /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h(54,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between call:free(void *) (54:3) and tmp_cells_ptr->speeds (754:6)
   remark #15346: vector dependence: assumed ANTI dependence between tmp_cells_ptr->speeds (754:6) and call:free(void *) (54:3)
   remark #25436: completely unrolled by 9  
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(745,1):remark #34051: REGISTER ALLOCATION : [finalise] d2q9-bgk.c:745

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8 r12-r13 r15]
        
    Routine temporaries
        Total         :      57
            Global    :      11
            Local     :      46
        Regenerable   :       2
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calc_reynolds(const t_param, s_speed *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calc_reynolds(const t_param, s_speed *, int *)) [10/14=71.4%] d2q9-bgk.c(768,1)
  -> INLINE: (771,10) av_velocity(const t_param, s_speed *, int *) (isz = 166) (sz = 177)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(536,3) inlined into d2q9-bgk.c(771,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(538,5) inlined into d2q9-bgk.c(771,10)
      remark #15389: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(548,28) ]
      remark #15389: vectorization support: reference cells->speeds[1][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(552,24) ]
      remark #15389: vectorization support: reference *(u_x+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(553,25) ]
      remark #15389: vectorization support: reference *(u_x+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(554,25) ]
      remark #15389: vectorization support: reference cells->speeds[3][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(555,26) ]
      remark #15389: vectorization support: reference *(u_x+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(556,28) ]
      remark #15389: vectorization support: reference *(u_x+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(557,28) ]
      remark #15389: vectorization support: reference cells->speeds[2][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(560,24) ]
      remark #15389: vectorization support: reference *(u_x+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(561,25) ]
      remark #15389: vectorization support: reference *(u_x+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(562,25) ]
      remark #15389: vectorization support: reference cells->speeds[4][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(563,26) ]
      remark #15389: vectorization support: reference *(u_x+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(565,28) ]
      remark #15389: vectorization support: reference *(u_x+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(564,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.263
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(533,3) ]
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(529,20) ]
      remark #15301: OUTER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 13 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 115 
      remark #15477: vector cost: 28.000 
      remark #15478: estimated potential speedup: 3.910 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at d2q9-bgk.c(546,9) inlined into d2q9-bgk.c(771,10)
         remark #15389: vectorization support: reference cells->speeds[kk] has unaligned access   [ d2q9-bgk.c(548,28) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: indirect load was emulated for the variable <cells->speeds[kk][ii+jj*params.nx]>, 64-bit indexed, part of address is read from memory   [ d2q9-bgk.c(548,28) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.163
         remark #15355: vectorization support: local_density is float type reduction   [ d2q9-bgk.c(544,31) ]
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15462: unmasked indexed (or gather) loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 13.000 
         remark #15478: estimated potential speedup: 0.350 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(538,5) inlined into d2q9-bgk.c(771,10)
   <Remainder loop for vectorization>

      LOOP BEGIN at d2q9-bgk.c(546,9) inlined into d2q9-bgk.c(771,10)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(768,1):remark #34051: REGISTER ALLOCATION : [calc_reynolds] d2q9-bgk.c:768

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     158
            Global    :      41
            Local     :     117
        Regenerable   :      11
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       5 [7.11e-01 ~ 0.7%]
            Writes    :       4 [4.55e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: total_density(const t_param, const s_speed *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (total_density(const t_param, const s_speed *__restrict__)) [11/14=78.6%] d2q9-bgk.c(775,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(782,7)
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 3 1 2 )
   remark #25440: unrolled and jammed by 4   (pre-vector) 
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ d2q9-bgk.c(782,7) ]

   LOOP BEGIN at d2q9-bgk.c(778,3)
      remark #25440: unrolled and jammed by 4   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(780,5)
      <Peeled loop for vectorization>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         remark #25457: Number of partial sums replaced: 1
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(780,5)
         remark #15389: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(784,18) ]
         remark #15389: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(784,18) ]
         remark #15389: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(784,18) ]
         remark #15389: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(784,18) ]
         remark #15389: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(784,18) ]
         remark #15389: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(784,18) ]
         remark #15389: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(784,18) ]
         remark #15389: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(784,18) ]
         remark #15389: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(784,18) ]
         remark #15389: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(784,18) ]
         remark #15389: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(784,18) ]
         remark #15389: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(784,18) ]
         remark #15388: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(784,18) ]
         remark #15388: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(784,18) ]
         remark #15388: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(784,18) ]
         remark #15388: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(784,18) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.392
         remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk.c(776,17) ]
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 4 
         remark #15450: unmasked unaligned unit stride loads: 12 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 82 
         remark #15477: vector cost: 30.000 
         remark #15478: estimated potential speedup: 1.380 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(780,5)
      <Remainder loop for vectorization>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         remark #25457: Number of partial sums replaced: 1
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(778,3)
   <Remainder>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(780,5)
      <Peeled loop for vectorization>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         remark #25457: Number of partial sums replaced: 1
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(780,5)
         remark #15388: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(784,18) ]
         remark #15388: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(784,18) ]
         remark #15388: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(784,18) ]
         remark #15388: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(784,18) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.550
         remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk.c(776,17) ]
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 20 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 1.530 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(780,5)
      <Remainder loop for vectorization>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         remark #25457: Number of partial sums replaced: 1
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(782,7)
<Remainder>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(778,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(780,5)
         remark #15389: vectorization support: reference cells->speeds[kk][ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(784,18) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.429
         remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk.c(776,17) ]
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 1.750 
         remark #15478: estimated potential speedup: 2.040 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(780,5)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(775,1):remark #34051: REGISTER ALLOCATION : [total_density] d2q9-bgk.c:775

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     255
            Global    :     122
            Local     :     133
        Regenerable   :       7
        Spilled       :      32
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     224 bytes*
            Reads     :      54 [1.28e+01 ~ 12.8%]
            Writes    :      35 [2.29e+00 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: die(const char *, const int, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (die(const char *, const int, const char *)) [12/14=85.7%] d2q9-bgk.c(876,1)
  -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (879,3) fflush(FILE *)
  -> EXTERN: (880,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(876,1):remark #34051: REGISTER ALLOCATION : [die] d2q9-bgk.c:876

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbx rsi rdi]
        
    Routine temporaries
        Total         :      28
            Global    :       1
            Local     :      27
        Regenerable   :       9
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: usage(const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (usage(const char *)) [13/14=92.9%] d2q9-bgk.c(884,1)
  -> EXTERN: (885,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (886,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(884,1):remark #34051: REGISTER ALLOCATION : [usage] d2q9-bgk.c:884

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      15
            Global    :       0
            Local     :      15
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, s_speed *, s_speed *, int **, decimal **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initialise(const char *, const char *, t_param *, s_speed *, s_speed *, int **, decimal **)) [14/14=100.0%] d2q9-bgk.c(585,1)
  -> EXTERN: (593,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (597,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (598,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (602,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (604,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (606,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (608,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (610,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (612,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (614,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (616,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (618,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (620,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (622,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (624,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (626,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (628,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (631,3) fclose(FILE *)
  -> INLINE (MANUAL): (656,38) _mm_malloc(size_t, size_t) (isz = 22) (sz = 33)
    -> EXTERN: /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h:(42,12) malloc(size_t)
    -> EXTERN: /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h:(45,7) posix_memalign(void **, size_t, size_t)
  -> INLINE: (658,34) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> INLINE (MANUAL): (664,42) _mm_malloc(size_t, size_t) (isz = 22) (sz = 33)
    -> EXTERN: /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h:(42,12) malloc(size_t)
    -> EXTERN: /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h:(45,7) posix_memalign(void **, size_t, size_t)
  -> INLINE: (666,38) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> INLINE (MANUAL): (669,27) _mm_malloc(size_t, size_t) (isz = 22) (sz = 33)
    -> EXTERN: /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h:(42,12) malloc(size_t)
    -> EXTERN: /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h:(45,7) posix_memalign(void **, size_t, size_t)
  -> INLINE: (670,31) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (707,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (711,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (712,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (716,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (716,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (719,22) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> INLINE: (721,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> INLINE: (723,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> INLINE: (725,23) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (878,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (732,3) fclose(FILE *)
  -> EXTERN: (738,28) malloc(size_t)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at d2q9-bgk.c(677,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(654,3)
   remark #15382: vectorization support: call to function posix_memalign(void **, size_t, size_t) cannot be vectorized   [ /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h(45,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between params (656:38) and __ptr (45:7)
   remark #15346: vector dependence: assumed FLOW dependence between __ptr (45:7) and params (656:38)
   remark #25436: completely unrolled by 9  
LOOP END

LOOP BEGIN at d2q9-bgk.c(662,3)
   remark #15382: vectorization support: call to function posix_memalign(void **, size_t, size_t) cannot be vectorized   [ /mnt/storage/software/languages/gcc-7.2.0/lib/gcc/x86_64-pc-linux-gnu/7.2.0/include/mm_malloc.h(45,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between params (664:42) and __ptr (45:7)
   remark #15346: vector dependence: assumed FLOW dependence between __ptr (45:7) and params (664:42)
   remark #25436: completely unrolled by 9  
LOOP END

LOOP BEGIN at d2q9-bgk.c(698,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(700,5)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(700,5)
         remark #15389: vectorization support: reference *obstacles_ptr[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(702,9) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 4.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(700,5)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(716,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at d2q9-bgk.c(677,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between cells_ptr->speeds[0][ii+jj*params->nx] (683:7) and cells_ptr->speeds[8][ii+jj*params->nx] (693:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between cells_ptr->speeds[8][ii+jj*params->nx] (693:7) and cells_ptr->speeds[0][ii+jj*params->nx] (683:7)
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(700,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
d2q9-bgk.c(700,5):remark #34026: call to memset implemented as a call to optimized library version
d2q9-bgk.c(585,1):remark #34051: REGISTER ALLOCATION : [initialise] d2q9-bgk.c:585

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     771
            Global    :     126
            Local     :     645
        Regenerable   :     317
        Spilled       :      10
        
    Routine stack
        Variables     :    1128 bytes*
            Reads     :      65 [5.85e+00 ~ 5.8%]
            Writes    :      10 [9.27e-01 ~ 0.9%]
        Spills        :     120 bytes*
            Reads     :      26 [2.49e+00 ~ 2.5%]
            Writes    :      20 [1.15e+00 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

